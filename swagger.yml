const swaggerJSDoc = require("swagger-jsdoc");
const swaggerUi = require("swagger-ui-express");

const options = {
	definition: {
		openapi: "3.0.0",
		servers: [{ url: "http://localhost:5000" }],
		info: {
			title: "KCF Students API",
			version: "1.0.0",
			description: "This is a REST API demo for Kanzu Code Backend Cohort 3 class",
		},
	},
	apis: ["./v1/routes/*.js"],
};

// Docs in JSON format
const swaggerSpecs = swaggerJSDoc(options);

// Function to setup our docs
const swaggerDocs = (app, port) => {

	// Route-Handler to visit our docs
	app.use("/api/v1/docs", swaggerUi.serve, swaggerUi.setup(swaggerSpecs));

	// Make docs in JSON format available
	app.get("/api/v1/docs.json", (req, res) => {
		res.setHeader("Content-Type", "application/json");
		res.send(swaggerSpec);
	});
	console.log(
		`Docs on http://localhost:${port}/api/v1/docs`.magenta
	);
};

module.exports = { swaggerDocs };


/**
 * @openapi
 * paths:
 *  /api/v1/students{studentId}:
 *    get:
 *       tags:
 *          - Students
 *       summary: Get student by ID
 *       parameters:
 *          - name: studentId
 *            in: path
 *            description: The ID of the student
 *            required: true
 *  /api/v1/students:
 *   get:
 *    tags:
 *      - Students
 *    summary: Returns a list of all students.
 *    responses:
 *     '200':
 *      description: Success returning all students from the database
 *   post:
 *    tags:
 *      - Students
 *    summary: Register a new student.
 *    requestBody:
 *       required: true
 *       content:
 *          application/json:
 *             schema:
 *                $ref: '#/components/schemas/Student'  
 *    responses:
 *     '201':
 *       description: Ok
 *       content:
 *          application/json:
 *             schema:
 *                $ref: '#/components/schemas/Student'
 *     '409':
 *          description: Conflict
 *     '400':
 *          description: Bad request      
 * components:
 *  schemas:
 *   Student:
 *    type: object
 *    properties:
 *       id:
 *          type: number
 *       name:
 *          type: string
 *       phonenumber:
 *          type: string
 *       emailaddress:
 *          type: string
 *          format: email
 *       password:
 *          type: string
 *          format: password
 *       track:
 *          type: string
 *       createdAt:
 *          type: string
 *          format: date-time
 *    required:
 *       - name
 *       - phonenumber
 *       - emailaddress
 *       - password   
 *       - track
 * 
 */